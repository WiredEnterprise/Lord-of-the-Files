Herr der Dateien: Wie GitHub Freie Software (und mehr) zähmte

Von Robert McMillan, Wired Enterprise

SAN FRANCISCO — Als die Gründer von GitHub letztes Jahr in ihren protzigen Loft im South-of-Market-Viertel umzogen, dekorierten sie als erstes gleich einmal um. Sie verwandelten das größte Büro in die Parodie einer Vorstandssuite — inklusive falschem Kamin, üppigen Lederstühlen und einem Holzglobus, der nach dem Aufklappen eine Flasche Single Malt Whisky preisgibt. An der Wand hängt das Gemälde einer Katze mit fünf Oktopus-artigen Beinen, die aussieht wie Napoleon. Sie nennen sie Octocat.

Der Punkt ist, dass es eben genau keine Vorstandssuite ist, sondern ein Gemeinschaftsraum, in dem man sich trifft, Arbeit erledigt, und gleichzeitig ein wenig Spaß hat.

“Jeder kann seine Freunde in diesen Raum mitbringen und sie beeindrucken und so”, sagt Scott Chacon, CIO und Mitgründer von GitHub. Chacon sowie CEO Chris Wanstrath und der Rest des Führungsteams haben keine privaten Büros. Sie arbeiten im Großraumbüro gemeinsam mit den Entwicklern, kleben wie der Rest der Truppe an ihren Monitoren und hören LCD Soundsystem. Laut.

GitHubs geektastischer 1.300 Quadratmeter großer Loft spiegelt die Unternehmensmission wider: Die Demokratisierung der Programmierung. GitHub.com ist wie ein Facebook für Geeks. Statt des Videos der eigenen Katze wird Software hochgeladen. Jeder kann fremden Code kommentieren, etwas hinzufügen oder etwas Besseres daraus machen. Programmieren wird dezentralisiert, und jeder bekommt eine neue Art von Macht. GitHub hat die Art und Weise verändert, wie Software geschrieben wird. Programmieren ist jetzt ein wenig anarchischer, macht ein wenig mehr Spaß, und ist viel produktiver.

Und die Softwarewelt liebt es. GitHub hat mittlerweile mehr als 1,3 Millionen Benutzer und mehr als zwei Millionen Quellcode-Repositories, acht Mal so viele wie noch vor zwei Jahren. Zählt man Code-Schnipsel und Wiki-Seiten dazu, sind es mehr als vier Millionen Repositories. Vor zwei Jahren bestand GitHub noch aus acht Mitarbeitern und hielt seine Besprechungen in Cafés in San Francisco ab. Anfang 2011 waren es dann 14 “Hubbernauten”, wie sich die GitHub-Mitarbeiter liebevoll nennen, und ein Jahr später schon 57. Im Juli übernahmen sie die frühere Bleibe der Blogging-Truppe Six Apart. GitHub wächst schnell — und das gänzlich ohne Risikokapital.

Wenn man einmal von GitHub gehört hat, fällt es einem fast überall auf. Da hostet es den Code einer bekannten Website, dort unterstützt es ein internes Projekt eines Fortune-500-Unternehmens. Es hat Open-Source-Software viel näher an ihr eigentliches Ziel gebracht — aber damit nicht genug. Es demokratisiert die Erstellung von Webseiten und DNA-Analyse-Werkzeugen und vielleicht sogar von Gesetzestexten.

“GitHub hat die Art und Weise verändert, wie Leute an Entwicklung herangehen”, sagt Tom Preston-Werner, der Technische Direktor des Unternehmens. “Sie erkennen, dass es gar nicht so komplex sein muss.”

*Git befriedigt Bedürfnisse*

Wie viele andere erfolgreiche Geek-Projekte befriedigte auch GitHub anfangs die Bedürfnisse seiner eigenen Entwickler. Vor etwa fünf Jahren arbeiteten Wanstrath und sein Kollege P.J. Hyett beide als Programmierer bei Cnet, einer Website für Technik-News und Reviews. Das Werkzeug ihrer Wahl war Ruby on Rails, ein Programmier-Framework, das die Entwicklung von Webapplikationen vereinfacht.

Im Zuge ihrer Arbeiten bei Cnet verbesserten Wanstrath und Hyett auch Ruby on Rails selbst. Sie mussten aber bald feststellen, dass es nicht so einfach war, diese Weiterentwicklungen in das Originalprojekt einfließen zu lassen. Rails wurde, wie es damals in der Open-Source-Entwicklung üblich war, von einem Kader vertrauenswürdiger Programmierer verwaltet, welche über die Erlaubnis zum “Einchecken” von Code-Änderungen verfügten. Um ihre Änderungen ins zentrale Code-Repository zu bekommen, mussten Wanstrath and Hyett sich also an einen dieser vertrauenswürdigen Programmierer wenden und ihn davon überzeugen, dass ihre Änderungen es wert waren, integriert zu werden. Das stellte oft mehr Aufwand dar als das eigentliche Programmieren.

Sie waren aber nicht die einzigen Entwickler, die unter dem Open-Source-Modell der "vertrauenswürdigen Wächter" litten. Vor etwa einem Jahrzehnt kämpfte Linus Torvalds mit der Rolle als Wächter des Linux-Betriebssystems, das er entwickelt hatte. Anfangs hostete er Linux auf einer Website der Universität Helsinki. Wenn Programmierer einen Bug im Code fanden, schickten sie ihm eine Datei mit den Änderungen per E-Mail. Falls Torvalds die E-Mail las und ihm die Änderungen gefielen, baute er sie in Linux ein. Aber Torvalds war bekannt dafür, nicht alle seine E-Mails zu lesen, und als das Projekt populärer wurde, fielen mehr und mehr Änderungswünsche durch den Rost.

Das war das offene Geheimnis der Open-Source-Softwareentwicklung. Bei den meisten Freie-Software-Projekten wurden große Teile des geschriebenen Codes nie verwendet. Oft war es für Außenstehende einfach zu schwierig, den Kernentwicklern ihre Änderungen zu zeigen und diese in die Codebasis zu integrieren.

*Die Wiederkunft des Linus*

Aus diesem Grund entwickelte Torvalds im Jahr 2005 Git, eine Software zur Versionskontrolle, speziell dafür gestaltet, um den Overhead bei der Softwareprojektverwaltung zu minimieren. Mit Git kann jeder an seiner eigenen Version von Linux — oder jedem anderen Softwareprojekt — basteln und dann mit einem Knopfdruck die Änderungen mit Torvalds — oder auch jedem anderen — teilen. Es gibt keinen Wächter. Vereinfacht gesagt hat Torvalds ein Werkzeug entwickelt, das es einfach macht, eine alternative Version von Linux zu erstellen. Im Fachjargon nennt sich das dann “Fork” (dt. Weggabelung, Anm.).

In den 90er-Jahren war “forken” noch etwas Böses. Es war schuld an den unzähligen zueinander inkompatiblen Versionen von Unix. Eine Zeit lang gab es die große Angst, dass jemand seine eigene Version von Linux abspalten könnte, eine Version des Betriebssystems, die nicht mehr die selben Programme verwendete oder auf die gleiche Art und Weise arbeitete. Aber in der Git-Welt ist “forken” etwas Gutes. Der Trick dabei war es sicherzustellen, dass die Verbesserungen, die die Leute vornahmen, wieder an die Community zurück gegeben werden konnten. Es ist besser, wenn Leute ein Projekt abspalten und an ihren eigenen Änderungen basteln, als sie komplett auszusperren und nur ein paar vertrauenswürdige Autoritätspersonen den Code bearbeiten zu lassen.

An einem der wenigen sonnigen Februartage in Portland demonstriert Torvalds Git für Wired in seinem Heimbüro. Nach ein paar Tastaturanschlägen erblickt er zwei neue Änderungsvorschläge, die den selben Kernel-Code unterschiedlich verändern, eine potentielle Problemquelle.

Im alten System “war es sehr schwer, einen radikalen neuen Branch (dt. Zweig, Anm.) anzufangen, weil die involvierten Leute zuvor davon überzeugt werden mussten, diesen radikalen Branch zu unterstützen”, sagt Torvalds. “Im Gegensatz dazu macht es Git einfach, die Änderungen vorzunehmen, ohne um Erlaubnis zu fragen, und dann später zurückzukommen und das Endresultat herzuzeigen – und den Leuten zu sagen: 'Schaut, was ich gemacht habe, und ich kann euch auch beweisen, dass mein Ansatz viel besser ist.’”

Es mag für Linux gebaut worden sein, aber Git erwies sich bald als Segen für jede Organisation, die eine große Code-Basis verwaltet. Heute nutzen es etwa Facebook, Staples, Verizon und sogar Microsoft. Bei Google ist Git so wichtig, dass das Unternehmen Junio Hamano – der das Projekt von Torvalds übernommen hat – dafür bezahlt, an Git zu arbeiten. Außerdem bezahlten sie auch noch das Gehalt seines Stellvertreters, Shawn Pearce.

*Git doch ganz einfach*

Das Problem ist, dass nicht jeder Linus Torvalds ist, und nicht jedes Unternehmen Google. Für die anderen 99 Prozent ist das berüchtigte Kommandozeileninterface von Git nur schwer zu verwenden. Genau hier kommt GitHub ins Spiel. Es vereinfacht Git. Enorm. GitHubs erster Slogan war: “Git Hosting: Kein Grund mehr zum Verzweifeln.”

Tom Preston-Werner erdachte GitHub and holte Chris Wanstrath eines Nachts im Oktober 2007 ins Boot, bei einem Entwicklertreffen in Zeke’s, einer Sportbar in San Francisco unweit des Stadiums in der Innenstadt, in dem die San Francisco Giants spielen.

Zuerst war GitHub ein Nebenprojekt. Wanstrath und Preston-Werner trafen sich an Samstagen zum Brainstorming, entwickelten in ihrer Freizeit und verdienten tagsüber ihren Lebensunterhalt. “GitHub war nicht als Startup oder Unternehmen gedacht. GitHub war einfach ein Werkzeug, das wir benötigten”, sagt Wanstrath. Inspiriert von Gmail machten sie aus dem Projekt eine Beta-Version und ermöglichten Zugriff für Außenstehende. Bald sprach sich das herum.

Im Januar 2008 kam Hyett an Board. Und drei Monate nach dieser Nacht in der Sportbar erhielt Wanstrath eine Nachricht von Geoffrey Grosenbach, dem Gründer von PeepCode, einer E-Learning-Website, die damit begonnen hatte, GitHub zu verwenden. “Ich hoste den Code meines Unternehmens hier”, schrieb Grosenbach. “Ich fühle mich nicht wohl dabei, euch nicht dafür zu bezahlen. Kann ich euch einfach einen Scheck senden?”

Es war der erste von vielen. Im Juli 2008 kaufte Microsoft Powerset, das Startup, bei dem Preston-Werner tagsüber arbeitete. Der Softwareriese bot Preston-Werner einen $300.000-Bonus und ein Aktienpaket an, um für drei Jahre beim Unternehmen zu bleiben. Aber er kündigte und setzte alles auf GitHub.

“Es war damals etwas beängstigend, so etwas aufzugeben, aber ich würde überhaupt nichts an dieser Entscheidung ändern”, sagt er heute.

Als Wired früher in diesem Jahr die Büros von GitHub besuchte, fanden wir eine Art Geek-Paradies. Da gab es einen iPhone-gesteuerten Quadrocopter, gekühltes Bier vom Fass, und einen Besprechungsraum, der an eine billige Kopie des Kontrollraums des Weißen Hauses erinnerte, inklusive einem massiven roten Telefon aus den 1970ern. Aber die Spielzeuge sind nicht das, was GitHub einzigartig macht. Es ist die offene Feindschaft des Startups gegenüber betrieblichen Kontrollsystemen, die es von anderen unterscheidet.

“Wir machen keine Aufzeichnungen über Urlaubstage; wir schreiben keinen Stunden mit. So etwas interessiert uns nicht”, sagt CIO Scott Chacon. “Ich war schon einmal um Mitternacht hier, und es waren noch fünf andere Leute da. Und einmal war ich an einem Donnerstag tagsüber alleine hier.”

Und trotzdem ist es das produktivste Softwareentwicklungsteam, mit dem er jemals gearbeitet hat, sagt Chacon.

*Git in die Zukunft*

Preston-Werners Entscheidung, auf GitHub zu setzen, hat sich bezahlt gemacht. GitHub ist bereits profitabel. Benutzer können sich kostenlos anmelden und mitmachen, aber für Code, der nicht öffentlich zugänglich sein soll, müssen sie zahlen — $7 pro Monat oder mehr. GitHub verkauft außerdem ein betriebliches Produkt, mit dem Unternehmen ihre eigene Version von GitHub hinter der Firewall betreiben können. Das kostet mindestens $5.000 pro Jahr, kann aber für Unternehmen mit hunderten Entwicklern auch in die Hunderttausende gehen.

Ironischerweise zählt Torvalds nicht zu den eingefleischten Fans von GitHub. Er hatte die Entwicklung des Linux-Kernels letzten September nach einem Sicherheitsproblem beim alten System kurzzeitig zu GitHub gesiedelt. 

“Ich mag GitHub sehr”, sagt er. “Es wurde nicht ohne Grund ziemlich schnell eines der größten Quellcode-Repositories.” Aber dann entrollt er eine lange Liste aller “gravierenden” Probleme, die auftraten, als er seinen Code auf der Website hostete — viele davon wurden mittlerweile behoben. Er konnte die Kommentare nicht filtern, das E-Mail-Interface verlor Anhänge, das Web-Interface brachte Code-Beiträge durcheinander, und so weiter. Fazit: GitHub macht das Programmieren einfach. Aber man kann auch sehr einfach viel Mist bauen.

Das mag zwar stimmen, aber es hat die Plattform nicht aufgehalten. GitHub-Benutzer finden sich offenbar überall. Kürzlich traf sich Wired mit GitHubs Entwicklungsleiter Ryan Tomayko an einem Nachmittag in San Franciscos North-Beach-Viertel. Plötzlich lehnte sich der junge Mann am Nachbartisch herüber und unterbrach, als ob er gerade gehört hätte, wie jemand über seine Lieblingsband sprach. “Ich muss euch einfach sagen”, sagte er, “Github ist fantastisch.”

Es hilft sogar der Occupy-Bewegung. Als Jonathan Baldwin eine Mobil-Version von People’s Microphone erstellen wollte, einer Software, die von Occupy verwendet wird, um Nachrichten in großen Menschenmengen zu verteilen, stellte er seinen Code sofort auf GitHub. Die Website half ihm, den Code einfach zu teilen und sich schnell mit anderen Entwicklern zu vernetzen, um technische Probleme auszumerzen. “GitHub ist das Beste überhaupt. Wenn du es nicht auf GitHub hostest, dann existiert es nicht”, sagt Baldwin, ein Student der Parsons New School for Design in New York.

Und Software ist nur ein Teil der Geschichte. Geeks erkennen, dass GitHub auch andere Projekte verwalten kann. Bücher und sogar Vortragsmitschriften sind auf der Website aufgetaucht. Ein GitHub-Benutzer namens Manu Sporny veröffentlichte letztes Jahr seine DNA auf der Website in der Hoffnung, die Entwicklung von Open-Source-DNA-Analyse-Software mit Hilfe realer Testdaten voranzutreiben.

Als Scott Chacon ein Buch über Git schrieb, erschien der erste Fork innerhalb eines Monats. Es war eine deutsche Übersetzung seines Buches. Nun, drei Jahre später, wurde es bereits in zehn Sprachen übersetzt, zehn weitere sind in Arbeit. Die Hälfte der Besucher der Buch-Website kommen aus China. “Unmengen von Leuten in China lernen Git, weil sie das Buch auf Chinesisch auf meiner Website lesen können, nachdem das jemand zur Verfügung gestellt hat”, sagt er.

Ryan Blair, ein Technologe des New Yorker Staatssenats, glaubt, dass es Bürgern sogar eine Möglichkeit geben könnte, Gesetze zu überarbeiten und gewählten Volksvertretern ihre eigenen Änderungsanträge vorzuschlagen. Ein Werkzeug wie GitHub könnte es für Wähler auch einfacher machen, Änderungen an komplexer Gesetzesmaterie zu verfolgen und ihrer eigenen Meinung Gehör zu verschaffen. “Wenn man darüber nachdenkt, ist eine Gesetzesvorlage nichts anderes als ein Branch des Gesetzes”, sagt er. “Ich finde die Idee großartig, dass ein Wähler seinem Senator einen Pull Request senden könnte.”

Heute ist GitHub der Liebling der Open-Source-Welt, aber noch in diesem Jahr soll Microsoft anvisiert werden. GitHub hat kürzlich eine Handvoll Programmierer des Softwareriesen angeheuert, und es arbeitet an neuer Software, um die nach wie vor beachtliche Anzahl von Programmierern ins Boot zu holen, die Programme mit Microsofts Softwareentwicklungstools erstellen.

“Ich möchte in einer Welt leben, in der es einfacher ist, zusammen zu arbeiten als alleine … wo jeder Schritt des Softwareentwicklungsprozesses Spaß macht”, sagt CEO Wanstrath. “Und ich denke, GitHub kann das möglich machen.”


SIDEBAR:

Warum Git? Das ist der britische Slangausdruck für eine dumme, verachtenswerte Person — einen Arsch. Der Witz “Ich benenne alle meine Projekte nach mir, zuerst Linux, nun Git” war einfach zu gut, um ihn mir entgehen zu lassen. Aber es ist auch kurz und einfach auszusprechen und zu tippen. Außerdem halbwegs einzigartig und kein Standardbefehl, was ungewöhnlich ist. –Linus Torvalds
